#!/data/data/com.termux/files/usr/bin/bash
# Script name: pruner
# Author: Y3rw1N
# Created in Termux with Neovim
# This script was created as a "shortcut" for people who don't like to do everything manually
# The script is intended for Android with the Termux terminal emulator installed

set -euo pipefail
trap 'printf "Error on line %s\n" "$LINENO" >&2; exit 1' ERR

source "$(dirname "$0")/lib/reload-termux-config"

json_file="$(find "$(dirname "$0")/" -maxdepth 2 -type f -name "style.json")"

# CONST
SCRIPT_VERSION="1.0"

TERMUX_DIRECTORY="$HOME/.termux"
TERMUX_FONT_PATH="$TERMUX_DIRECTORY/font.ttf"
TERMUX_THEME_PATH="$TERMUX_DIRECTORY/colors.properties"

PRUNER_DIRECTORY="$TERMUX_DIRECTORY/.pruner"

THEMES_DIRECTORY="$PRUNER_DIRECTORY/themes"
FONTS_DIRECTORY="$PRUNER_DIRECTORY/fonts"
# ----
BOLD="\033[1m"
CYAN_BOLD="\033[1;36m"

RESET="\033[0m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
CYAN="\033[36m"

echoerr() {
	printf "%s\n" "$@" >&2	
	exit 1
}

if [[ "${OSTYPE:-}" != "linux-android" ]]; then
  echoerr "[${YELLOW}!${RESET}] only for android OS with termux terminal installed"
fi

# CHECK FOR MISSING DEPENDENCIES
for d in curl jq; do
  [[ -z "$(command -v "$d")" ]] && echoerr "${d} dependency is not installed\nplease install the dependency for the script to work"
done

help_message() {
	cat << EOF 
usage: $0 [option] [theme OR font]
global commands:
  install   Install themes or fonts
  remove    Remove themes or fonts
  list      Lists the themes and fonts that are available, installed and established
  set       establish theme or font
variable commands:
  --help
  --version
EOF
}

[[ ! -f "$json_file" ]] && echoerr "the download source store was deleted or renamed\nwithout this file the script will be unusable"

ensure_dir() {
  local dir="$1"
  [[ -d "$dir" ]] || mkdir -p "$dir"
}

install_ft_files() {
	local subcommand="${1:---help}"
	local filename="${2:-}"
	local download_sources target_file

	case "$subcommand" in
		-f | --font)
			download_sources="$(jq -r ".\"fonts\".\"$filename\"" "$json_file")"		
			target_file="$FONTS_DIRECTORY/$filename.ttf"
			ensure_dir "$FONTS_DIRECTORY"
			;;
		-t | --theme)
			download_sources="$(jq -r ".\"themes\".\"$filename\"" "$json_file")"
			target_file="$THEMES_DIRECTORY/$filename.properties"
			ensure_dir "$THEMES_DIRECTORY"
			;;
    --help)
    cat<<EOF
You must specify what font or theme you must install:
  --font <font-name>   install a font
  --theme <theme-name>  install a theme
You can only download fonts or themes that are available
if you want to know write '$0 list' to find out the available fonts or themes
EOF
      return
      ;;
		*)
			echoerr "invalid option: $subcommand"
			;;
	esac

  [[ -z "$download_sources" || "$download_sources" == null ]] && echoerr "This font or theme is not registered"
	[[ -e "$target_file" ]] && echoerr "you already have it installed stupid"

  printf "Downloading %s%s%s\n" "$BOLD" "$filename" "$RESET"
	if ! curl -# -fSLo "$target_file" "$download_sources"; then
		echoerr "${RED}download error${RESET}: maybe the URL has been changed or deleted"
	fi
	
	printf "%s%s%s %shas been downloaded successfully\n" "$BOLD" "$filename" "$RESET" "$GREEN"
	return
}

list_ft() {
  local subcommand="${1:--a}"
  local registred_themes registred_fonts downloaded_themes downloaded_fonts

  registred_themes="$(jq -r '.["themes"] | keys | .[]' "$json_file")"
  registred_fonts="$(jq -r '.["fonts"] | keys | .[]' "$json_file")"
  downloaded_themes="$(find "$THEMES_DIRECTORY" -type f -print0 2>/dev/null | xargs -0 -n 1 basename 2>/dev/null | sed 's/.properties$//' || true)"
  downloaded_fonts="$(find "$FONTS_DIRECTORY" -type f -print0 2>/dev/null | xargs -0 -n 1 basename 2>/dev/null | sed 's/.ttf$//' || true)"
   
  case "$subcommand" in
    -a | --all)
      [[ -z "$registred_fonts" || -z "$registred_themes" ]] && echoerr "This font or theme is not registered"
  
      printf "fonts:\n"
      for FONT in $registred_fonts
      do
        if printf "%s\n" "$downloaded_fonts" | grep -q "^$FONT$"; then
          if cmp -s "$TERMUX_FONT_PATH" "$FONTS_DIRECTORY/$FONT.ttf"; then 
            printf "< %s%s%s >\n" "$CYAN_BOLD" "$FONT" "$RESET"
          else 
            printf "  %s%s%s\n" "$CYAN" "$FONT" "$RESET"
          fi
          continue
        fi
        printf "  %s\n" "$FONT"
      done 

      printf "themes:\n"
      for THEME in $registred_themes
      do
        if printf "%s\n" "$downloaded_themes" | grep -q "^$THEME$"; then
          if cmp -s "$TERMUX_THEME_PATH" "$THEMES_DIRECTORY/$THEME.properties"; then 
            printf "< %s%s%s >\n" "$CYAN_BOLD" "$THEME" "$RESET"
          else 
            printf "  %s%s%s\n" "$CYAN" "$THEME" "$RESET"
          fi
          continue 
        fi
        printf "  %s\n" "$THEME"
      done
      ;;
    -f | --font)
      [[ -z "$registred_fonts" ]] && echoerr "no registred fonts found"
  
      printf "fonts:\n"
      for FONT in $registred_fonts
      do
        if printf "%s\n" "$downloaded_fonts" | grep -q "^$FONT$"; then
          if cmp -s "$TERMUX_FONT_PATH" "$FONTS_DIRECTORY/$FONT.ttf"; then  
            printf "< %s%s%s >\n" "$CYAN_BOLD" "$FONT" "$RESET"
          else  
            printf "  %s%s%s\n" "$CYAN" "$FONT" "$RESET"
          fi
          continue
        fi 
        printf "  %s\n" "$FONT"
      done
      ;;
    -t | --theme)
      [[ -z "$registred_themes" ]] && echoerr "no registred themes found"

      printf "themes:\n"
      for THEME in $registred_themes
      do
        if printf "%s\n" "$downloaded_themes" | grep -q "^$THEME$"; then
          if cmp -s "$TERMUX_THEME_PATH" "$THEMES_DIRECTORY/$THEME.properties"; then 
            printf "< %s%s%s >\n" "$CYAN_BOLD" "$THEME" "$RESET"
          else  
            printf "  %s%s%s\n" "$CYAN" "$THEME" "$RESET"
          fi
          continue 
        fi 
        printf "  %s\n" "$THEME"
      done
      ;;
    *)
      echoerr "$0: $1: invalid option\n"
      ;;
  esac
}

remove_ft_files() {
  local subcommand="${1:-}"
  local filename="${2:-}"

	case "$subcommand" in
		-a | --all)
			if [[ ! -d "$FONTS_DIRECTORY" || -z "$(ls -A "$FONTS_DIRECTORY")" ]] && \
				[[ ! -d "$THEMES_DIRECTORY" || -z "$(ls -A "$THEMES_DIRECTORY")" ]]; then
				echoerr "everything was already erased"
			fi
			rm -rf -- "${THEMES_DIRECTORY:?}"/* "${FONTS_DIRECTORY:?}"/*
			printf "fonts and themes removed successfully\n"
			return
			;;
		-f | --font)
			if [[ ! -d "$FONTS_DIRECTORY" || -z "$(ls -A "$FONTS_DIRECTORY")" ]]; then
				echoerr "no fonts to remove."
			fi

			if [[ ! -f "${FONTS_DIRECTORY}/${filename}.ttf" ]]; then
				echoerr "this font could not be found because it does not exist."
			fi

			rm -f -- "${FONTS_DIRECTORY}/${filename}.ttf"
			printf "font has been removed successfully\n"
			return
			;;
		-t | --theme)
			if [[ ! -d "$THEMES_DIRECTORY" || -z "$(ls -A "$THEMES_DIRECTORY")" ]]; then
				echoerr "no themes to remove."
			fi

			if [[ ! -f "${THEMES_DIRECTORY}/${filename}.properties" ]]; then
				echoerr "this color scheme could not be found because it does not exist"
			fi

			rm -f -- "${THEMES_DIRECTORY}/${filename}.properties"
			printf "the theme has been removed successfully\n"
			return
			;;
		*)
			echoerr "$0: $1: invalid option"
			;;
	esac
}

set_ft() {
  local subcommand="${1:-}"
  local filename="${2:-}"

  case "$subcommand" in
    -f|--font)
      if [[ "$filename" == "default" ]]; then
        rm -f -- "$TERMUX_FONT_PATH"
        reload_settings
        printf "done\n"
        return
      fi
      [[ ! -f "$FONTS_DIRECTORY/$filename.ttf" ]] && echoerr "${RED}error${RESET}: This font apparently does not exist"

      cp "$FONTS_DIRECTORY/$filename.ttf" "$TERMUX_FONT_PATH"
      reload_settings
      printf "%s done\n" "$filename"
      ;;
    -t|--theme)
      if [[ "$filename" == "default" ]]; then
        rm "$TERMUX_THEME_PATH"
        reload_settings
        printf "done\n"
        return
      fi      
      [[ ! -f "$THEMES_DIRECTORY/$filename.properties" ]] && echoerr "this theme '$filename' not exists"

      cp "$THEMES_DIRECTORY/$filename.properties" "$TERMUX_THEME_PATH"
      reload_settings
      printf "%s done\n" "$filename"
      ;;
    *)
      echoerr "$0: $1: invalid option"
      ;;
  esac
}

main() {
  local command="${1:-}"
  local subcommand="${2:-}"
  local filename="${3:-}"

  if [[ $# -lt 1 || $# -gt 3 ]]; then
    echoerr "type '$0 --help' for more info"
  fi

  case "$command" in
	  in|install) install_ft_files "$subcommand" "$filename" ;;
	  rem|remove) remove_ft_files "$subcommand" "$filename" ;;
    list) list_ft "$subcommand" ;;
    set) set_ft "$subcommand" "$filename" ;;
    --version) printf "%s\n" "$SCRIPT_VERSION" ;;
	  --help) help_message ;;
	  *) echoerr "argument not found: $1\ntype '$0 --help' for more info" ;;
  esac
}

main "$@"
exit 0
