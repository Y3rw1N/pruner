#!/data/data/com.termux/files/usr/bin/bash
# Script name: pruner
# Author: Y3rw1N
# Created in Termux with Neovim
# This script was created as a "shortcut" for people who don't like to do everything manually
# The script is intended for Android with the Termux terminal emulator installed

set -eo pipefail
trap 'echo "There is an error on line $LINENO"; exit 1' ERR

source "$(dirname "$0")/lib/reload-termux-config"

command -v jq &>>/dev/null || { echo "jq is not installed"; exit 1; }
command -v curl &>>/dev/null || { echo "curl is not installed"; exit 1; }

script_version="1.0"
json_file="$(find "$(dirname "$0")/" -maxdepth 2 -type f -name "style.json")"

# CONST
TERMUX_DIRECTORY="$HOME/.termux"
TERMUX_FONT_PATH="$TERMUX_DIRECTORY/font.ttf"
TERMUX_THEME_PATH="$TERMUX_DIRECTORY/colors.properties"

PRUNER_DIRECTORY="$TERMUX_DIRECTORY/.pruner"

THEMES_DIRECTORY="$PRUNER_DIRECTORY/themes"
FONTS_DIRECTORY="$PRUNER_DIRECTORY/fonts"
# ----

help_message() {
echo "usage: $0 [option] [--argument] [theme OR font]
  remove:
    -f, --font
    -t, --theme
    -a, --all

  install:
    -f, --font 
    -t, --theme

  set:
    -f, --font
    -t, --theme

  list:
    -f, --font
    -t, --theme
    -a, --all
"
}

print_error() {
	echo -e "$1" >&2	
	return 1
}

[[ ! -f "$json_file" ]] && print_error "the download source store was deleted or renamed\nwithout this file the script will be unusable"

install_ft_files() {
	local subcommand="$1"
	local filename="$2"
	local download_sources
	local target_file

	case "$subcommand" in
		-f | --font)
			download_sources="$(jq -r ".\"fonts\".\"$filename\"" "$json_file")"		
			target_file="$FONTS_DIRECTORY/$filename.ttf"
			[[ ! -d "$FONTS_DIRECTORY" ]] && mkdir -p "$FONTS_DIRECTORY"
			;;

		-t | --theme)
			download_sources="$(jq -r ".\"colorschemes\".\"$filename\"" "$json_file")"
			target_file="$THEMES_DIRECTORY/$filename.properties"
			[[ ! -d "$THEMES_DIRECTORY" ]] && mkdir -p "$THEMES_DIRECTORY"
			;;
		*)
			print_error "invalid option: $subcommand"
			;;
	esac

  [[ -z "$download_sources" || "$download_sources" == null ]] && print_error "This font or theme is not registered"
	[[ -e "$target_file" ]] && print_error "you already have it installed stupid"

  echo -e "Downloading \e[1m$filename\e[0m"
	if ! curl -# -fSLo "$target_file" "$download_sources"
	then
		print_error "\033[31mdownload error\033[0m: maybe the URL has been changed or deleted"
	fi
	
	echo -e "\e[1m$filename\e[0m has been downloaded successfully"
	return
}

list_ft() {
  local subcommand="$1"
  local registred_themes="$(jq -r '.["colorschemes"] | keys | .[]' "$json_file")"
  local registred_fonts="$(jq -r '.["fonts"] | keys | .[]' "$json_file")"
  local downloaded_themes="$(ls "$THEMES_DIRECTORY/"*.properties 2>/dev/null | xargs -n 1 basename 2>/dev/null | sed 's/.properties$//')"
  local downloaded_fonts="$(ls "$FONTS_DIRECTORY/"*.ttf 2>/dev/null | xargs -n 1 basename 2>/dev/null | sed 's/.ttf$//')"
  
  case "$subcommand" in
    -a | --all)
      [[ -z "$registred_fonts" || -z "$registred_themes" ]] && print_error "This font or theme is not registered"
  
      echo "fonts:"
      for FONT in $registred_fonts
      do
        if echo "$downloaded_fonts" | grep -q "^$FONT$"
        then
          if cmp -s "$TERMUX_FONT_PATH" "$FONTS_DIRECTORY/$FONT.ttf"
          then 
            echo -e "< \033[1;36m$FONT\033[0m >"
          else 
            echo -e "  \033[36m$FONT\033[0m"
          fi
          continue
        fi
        echo "  $FONT"
      done 

      echo "themes:"
      for THEME in $registred_themes
      do
        if echo "$downloaded_themes" | grep -q "^$THEME$"
        then
          if cmp -s "$TERMUX_THEME_PATH" "$THEMES_DIRECTORY/$THEME.properties"
          then 
            echo -e "< \033[1;36m$THEME\033[0m >"
          else 
            echo -e "  \033[36m$THEME\033[0m"
          fi
          continue 
        fi
        echo "  $THEME"
      done
      ;;

    -f | --font)

      [[ -z "$registred_fonts" ]] && print_error "no registred fonts found"
  
      echo "fonts:"
      for FONT in $registred_fonts
      do
        if echo "$downloaded_fonts" | grep -q "^$FONT$"
        then
          if cmp -s "$TERMUX_FONT_PATH" "$FONTS_DIRECTORY/$FONT.ttf"
          then 
            echo -e "< \033[1;36m$FONT\033[0m >"
          else 
            echo -e "  \033[36m$FONT\033[0m"
          fi
          continue
        fi
        echo "  $FONT"
      done
      ;;

    -t | --theme)

      [[ -z "$registred_themes" ]] && print_error "no registred themes found"

      echo "themes:"
      for THEME in $registred_themes
      do
        if echo "$downloaded_themes" | grep -q "^$THEME$"
        then
          if cmp -s "$TERMUX_THEME_PATH" "$THEMES_DIRECTORY/$THEME.properties"
          then 
            echo -e "< \033[1;36m$THEME\033[0m >"
          else 
            echo -e "  \033[36m$THEME\033[0m"
          fi
          continue 
        fi
        echo "  $THEME"
      done
      ;;

    *)
      echo "xd"
      ;;
  esac
}

remove_ft_files() {
	local subcommand="$1"
	local filename="$2"

	case "$subcommand" in
		-a | --all)
			if [[ ! -d "$FONTS_DIRECTORY" || -z "$(ls -A "$FONTS_DIRECTORY")" ]] && \
				[[ ! -d "$THEMES_DIRECTORY" || -z "$(ls -A "$THEMES_DIRECTORY")" ]]
			then
				print_error "everything was already erased"
			fi
			rm -rf "${THEMES_DIRECTORY:?}"/*
			rm -rf "${FONTS_DIRECTORY:?}"/*
			echo "fonts and themes removed successfully"
			return
			;;

		-f | --font)
			if [[ ! -d "$FONTS_DIRECTORY" || -z "$(ls -A "$FONTS_DIRECTORY")" ]]
			then
				print_error "no fonts to remove."
			fi

			if [[ ! -f "${FONTS_DIRECTORY}/${filename}.ttf" ]] 
			then
				print_error "this font could not be found because it does not exist."
			fi

			rm -rf "${FONTS_DIRECTORY}/${filename}.ttf"
			echo "font has been removed successfully"
			return
			;;

		-t | --theme)
			if [[ ! -d "$THEMES_DIRECTORY" || -z "$(ls -A "$THEMES_DIRECTORY")" ]]
			then
				print_error "no themes to remove."
			fi

			if [[ ! -f "${THEMES_DIRECTORY}/${filename}.properties" ]]
			then
				print_error "this color scheme could not be found because it does not exist"
			fi

			rm -rf "${THEMES_DIRECTORY}/${filename}.properties"
			echo "the theme has been removed successfully"
			return
			;;

		*)
			print_error "invalid option: $subcommand"
			;;
	esac
}

set_ft() {
  local subcommand="$1"
  local filename="$2"

  case "$subcommand" in
    -f|--font)

      if [[ "$filename" == "default" ]]
      then
        rm "$TERMUX_FONT_PATH"
        reload_settings
        echo "done"
        return
      fi

      [[ ! -f "$FONTS_DIRECTORY/$filename.ttf" ]] && print_error "\033[31merror\033[0m: This font apparently does not exist"

      cp "$FONTS_DIRECTORY/$filename.ttf" "$TERMUX_FONT_PATH"
      reload_settings
      echo "$filename done"
      ;;
    -t|--theme)

      if [[ "$filename" == "default" ]]
      then
        rm "$TERMUX_THEME_PATH"
        reload_settings
        echo "done"
        return
      fi
      
      [[ ! -f "$THEMES_DIRECTORY/$filename.properties" ]] && print_error "this theme '$filename' not exists"

      cp "$THEMES_DIRECTORY/$filename.properties" "$TERMUX_THEME_PATH"
      reload_settings
      echo "$filename done"
      ;;
    *)
      print_error "error"
      ;;
  esac
}

main() {
  local command="$1"
  local subcommand="$2"
  local filename="$3"

  [[ "$#" -lt 1 || "$#" -gt 3 ]] && print_error "type '$0 --help' for more info"

  case "$command" in
	  install)
		  install_ft_files "$subcommand" "$filename"
		  ;;
	  remove)
		  remove_ft_files "$subcommand" "$filename"
		  ;;
    list)
      list_ft "$subcommand"
      ;;
    set)
      set_ft "$subcommand" "$filename"
      ;;
    --version)
      echo "$script_version"
      ;;
	  --help)
      [[ "$#" -ne 1 ]] && print_error "not exist subcommand"
		  help_message
		  ;;
	  *)
		  print_error "argument not found: $1\ntype '$0 --help' for more info"
		  ;;
  esac
}

main "$@"
