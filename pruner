#!/data/data/com.termux/files/usr/bin/bash
# Script name: pruner
# Author: Y3rw1N
# Created in Termux with Neovim
# This script was created as a "shortcut" for people who don't like to do everything manually
# The script is intended for Android with the Termux terminal emulator installed

set -eo pipefail
trap 'echo "There is an error on line $LINENO"; exit 1' ERR

source "$(dirname "$0")/lib/reload-termux-config"

json_file="$(find "$(dirname "$0")/" -maxdepth 2 -type f -name "style.json")"

# CONST
SCRIPT_VERSION="1.0"

TERMUX_DIRECTORY="$HOME/.termux"
TERMUX_FONT_PATH="$TERMUX_DIRECTORY/font.ttf"
TERMUX_THEME_PATH="$TERMUX_DIRECTORY/colors.properties"

PRUNER_DIRECTORY="$TERMUX_DIRECTORY/.pruner"

THEMES_DIRECTORY="$PRUNER_DIRECTORY/themes"
FONTS_DIRECTORY="$PRUNER_DIRECTORY/fonts"
# ----

echoerr() {
	echo -e "$@" >&2	
	exit 1
}

if [[ "$OSTYPE" != "linux-android" ]]; then
  echoerr "only for android OS with termux terminal installed"
fi

# CHECK FOR MISSING DEPENDENCIES
for d in curl jq; do
  [[ -z "$(command -v "$d")" ]] && echoerr "${d} dependency is not installed\nplease install the dependency for the script to work"
done

help_message() {
	cat << EOF 
usage: $0 [option] [theme OR font]
global commands:
  install   Install themes or fonts
  remove    Remove themes or fonts
  list      Lists the themes and fonts that are available, installed and established
  set       establish theme or font
variable commands:
  --help
  --version
EOF
}

[[ ! -f "$json_file" ]] && echoerr "the download source store was deleted or renamed\nwithout this file the script will be unusable"

install_ft_files() {
	local subcommand="${1:---help}"
	local filename="$2"
	local download_sources
	local target_file

	case "$subcommand" in
		-f | --font)
			download_sources="$(jq -r ".\"fonts\".\"$filename\"" "$json_file")"		
			target_file="$FONTS_DIRECTORY/$filename.ttf"
			[[ ! -d "$FONTS_DIRECTORY" ]] && mkdir -p "$FONTS_DIRECTORY"
			;;
		-t | --theme)
			download_sources="$(jq -r ".\"themes\".\"$filename\"" "$json_file")"
			target_file="$THEMES_DIRECTORY/$filename.properties"
			[[ ! -d "$THEMES_DIRECTORY" ]] && mkdir -p "$THEMES_DIRECTORY"
			;;
    --help)
    cat<<EOF
You must specify what font or theme you must install:
  --font <font-name>   install a font
  --theme <theme-name>  install a theme
You can only download fonts or themes that are available
if you want to know write '$0 list' to find out the available fonts or themes
EOF
      return
      ;;
		*)
			echoerr "invalid option: $subcommand"
			;;
	esac

  [[ -z "$download_sources" || "$download_sources" == null ]] && echoerr "This font or theme is not registered"
	[[ -e "$target_file" ]] && echoerr "you already have it installed stupid"

  echo -e "Downloading \e[1m$filename\e[0m"
	if ! curl -# -fSLo "$target_file" "$download_sources"; then
		echoerr "\033[31mdownload error\033[0m: maybe the URL has been changed or deleted"
	fi
	
	echo -e "\e[1m$filename\e[0m has been downloaded successfully"
	return
}

list_ft() {
  local subcommand="${1:--a}"
  local registred_themes
  local registred_fonts
  local downloaded_themes
  local downloaded_fonts

  registred_themes="$(jq -r '.["themes"] | keys | .[]' "$json_file")"
  registred_fonts="$(jq -r '.["fonts"] | keys | .[]' "$json_file")"
  downloaded_themes="$(find "$THEMES_DIRECTORY" -type f -print0 2>/dev/null | xargs -0 -n 1 basename 2>/dev/null | sed 's/.properties$//' || true)"
  downloaded_fonts="$(find "$FONTS_DIRECTORY" -type f -print0 2>/dev/null | xargs -0 -n 1 basename 2>/dev/null | sed 's/.ttf$//' || true)"
  
  
  case "$subcommand" in
    -a | --all)
      [[ -z "$registred_fonts" || -z "$registred_themes" ]] && echoerr "This font or theme is not registered"
  
      echo "fonts:"
      for FONT in $registred_fonts
      do
        if echo "$downloaded_fonts" | grep -q "^$FONT$"; then
          if cmp -s "$TERMUX_FONT_PATH" "$FONTS_DIRECTORY/$FONT.ttf"; then 
            echo -e "< \033[1;36m$FONT\033[0m >"
          else 
            echo -e "  \033[36m$FONT\033[0m"
          fi
          continue
        fi
        echo "  $FONT"
      done 

      echo "themes:"
      for THEME in $registred_themes
      do
        if echo "$downloaded_themes" | grep -q "^$THEME$"; then
          if cmp -s "$TERMUX_THEME_PATH" "$THEMES_DIRECTORY/$THEME.properties"; then 
            echo -e "< \033[1;36m$THEME\033[0m >"
          else 
            echo -e "  \033[36m$THEME\033[0m"
          fi
          continue 
        fi
        echo "  $THEME"
      done
      ;;
    -f | --font)
      [[ -z "$registred_fonts" ]] && echoerr "no registred fonts found"
  
      echo "fonts:"
      for FONT in $registred_fonts
      do
        if echo "$downloaded_fonts" | grep -q "^$FONT$"; then
          if cmp -s "$TERMUX_FONT_PATH" "$FONTS_DIRECTORY/$FONT.ttf"; then 
            echo -e "< \033[1;36m$FONT\033[0m >"
          else 
            echo -e "  \033[36m$FONT\033[0m"
          fi
          continue
        fi
        echo "  $FONT"
      done
      ;;
    -t | --theme)
      [[ -z "$registred_themes" ]] && echoerr "no registred themes found"

      echo "themes:"
      for THEME in $registred_themes
      do
        if echo "$downloaded_themes" | grep -q "^$THEME$"; then
          if cmp -s "$TERMUX_THEME_PATH" "$THEMES_DIRECTORY/$THEME.properties"; then 
            echo -e "< \033[1;36m$THEME\033[0m >"
          else 
            echo -e "  \033[36m$THEME\033[0m"
          fi
          continue 
        fi
        echo "  $THEME"
      done
      ;;
    *)
      echo "$0: $1: invalid option"
      ;;
  esac
}

remove_ft_files() {
	local subcommand="$1"
	local filename="$2"

	case "$subcommand" in
		-a | --all)
			if [[ ! -d "$FONTS_DIRECTORY" || -z "$(ls -A "$FONTS_DIRECTORY")" ]] && \
				[[ ! -d "$THEMES_DIRECTORY" || -z "$(ls -A "$THEMES_DIRECTORY")" ]]; then
				echoerr "everything was already erased"
			fi
			rm -rf "${THEMES_DIRECTORY:?}"/*
			rm -rf "${FONTS_DIRECTORY:?}"/*
			echo "fonts and themes removed successfully"
			return
			;;
		-f | --font)
			if [[ ! -d "$FONTS_DIRECTORY" || -z "$(ls -A "$FONTS_DIRECTORY")" ]]; then
				echoerr "no fonts to remove."
			fi

			if [[ ! -f "${FONTS_DIRECTORY}/${filename}.ttf" ]]; then
				echoerr "this font could not be found because it does not exist."
			fi

			rm -rf "${FONTS_DIRECTORY}/${filename}.ttf"
			echo "font has been removed successfully"
			return
			;;
		-t | --theme)
			if [[ ! -d "$THEMES_DIRECTORY" || -z "$(ls -A "$THEMES_DIRECTORY")" ]]; then
				echoerr "no themes to remove."
			fi

			if [[ ! -f "${THEMES_DIRECTORY}/${filename}.properties" ]]; then
				echoerr "this color scheme could not be found because it does not exist"
			fi

			rm -rf "${THEMES_DIRECTORY}/${filename}.properties"
			echo "the theme has been removed successfully"
			return
			;;
		*)
			echoerr "$0: $1: invalid option"
			;;
	esac
}

set_ft() {
  local subcommand="$1"
  local filename="$2"

  case "$subcommand" in
    -f|--font)
      if [[ "$filename" == "default" ]]; then
        rm "$TERMUX_FONT_PATH"
        reload_settings
        echo "done"
        return
      fi
      [[ ! -f "$FONTS_DIRECTORY/$filename.ttf" ]] && echoerr "\033[31merror\033[0m: This font apparently does not exist"

      cp "$FONTS_DIRECTORY/$filename.ttf" "$TERMUX_FONT_PATH"
      reload_settings
      echo "$filename done"
      ;;
    -t|--theme)
      if [[ "$filename" == "default" ]]; then
        rm "$TERMUX_THEME_PATH"
        reload_settings
        echo "done"
        return
      fi      
      [[ ! -f "$THEMES_DIRECTORY/$filename.properties" ]] && echoerr "this theme '$filename' not exists"

      cp "$THEMES_DIRECTORY/$filename.properties" "$TERMUX_THEME_PATH"
      reload_settings
      echo "$filename done"
      ;;
    *)
      echoerr "$0: $1: invalid option"
      ;;
  esac
}

main() {
  local command="$1"
  local subcommand="$2"
  local filename="$3"

  [[ "$#" -lt 1 || "$#" -gt 3 ]] && echoerr "type '$0 --help' for more info"

  case "$command" in
	  in|install)
		  install_ft_files "$subcommand" "$filename"
		  ;;
	  rem|remove)
		  remove_ft_files "$subcommand" "$filename"
		  ;;
    list)
      list_ft "$subcommand"
      ;;
    set)
      set_ft "$subcommand" "$filename"
      ;;
    --version)
      echo "$SCRIPT_VERSION"
      ;;
	  --help)
      [[ "$#" -ne 1 ]] && echoerr "not exist subcommand"
		  help_message
		  ;;
	  *)
		  echoerr "argument not found: $1\ntype '$0 --help' for more info"
		  ;;
  esac
}

main "$@"
exit 0
